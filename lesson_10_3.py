# 3. Осуществить программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс «Клетка». В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__floordiv__, __truediv__()).
# Эти методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и округление до целого числа деления клеток, соответственно.

# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

# Вычитание. Участвуют две клетки. Операцию необходимо выполнять,
# только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.

# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки —
# произведение количества ячеек этих двух клеток.

# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Этот метод позволяет организовать ячейки по рядам.

# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек
# между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает,
# то в последний ряд записываются все оставшиеся.

# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5.
# В этом случае метод make_order() вернёт строку: *****\n*****\n**.

# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n*****.

# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, num):
        self.num = num

    def __add__(self, other):
        sum_cell = self.num + other.num
        return sum_cell

    def __sub__(self, other):
        sub_cell = self.num - other.num
        if sub_cell > 0:
            return sub_cell
        else:
            return 'Разница не может быть отрицательным числом'

    def __mul__(self, other):
        sum_cell = self.num * other.num
        return sum_cell

    def __floordiv__(self, other):
        sum_cell = self.num // other.num
        return sum_cell

    def make_order(self, col):
        rov = self.num // col
        rov_l = self.num % col
        for i in range(rov):
            print('*'*col)
        print('*'*rov_l)


cell1 = Cell(3)
cell2 = Cell(2)
print(cell1 + cell2)

print(cell1 - cell2)
cell3 = Cell(2)
cell4 = Cell(3)
print(cell3 - cell4)

print(cell1 * cell2)

cell5 = Cell(5)
cell6 = Cell(2)
print(cell5 // cell6)

cell6 = Cell(15)
cell6.make_order(4)

